* To start mongodb: skriv följande bara 'mongosh' i terminalen.


- show dbs: 
test> show dbs
admin   40.00 KiB
config  72.00 KiB
local   72.00 KiB

- use admin = eller vad som helst(den skapar)
- exit = loggar ut från mongodb
- mongosh = startar mongodb servern
- show dbs
- db.createCollection('superhero')
- show collections = för att se vilka collections vi har
- db.superheroesTest.insertOne({heroName: "Superman", fisrName:"Klark", lastName:"Kent"})
- db.superheroesTest.find() = för att se det vi har i den collection
******* Avoid using 'insert-method'
- db.superheros.insert({}) = för att kunna skicka in ett object/document i en collection
- db.superheros.insert([]) = för att kunna skicka in flera object/document i en collection
*******
- db.superheros.insertOne({}) = för att kunna skapa en object
- db.superheros.insertMany([]) = för att kunna skapa flera object
- db = visar var man är 
** 2 sätt att skapa en collection
- db.customer.inserOne({name: "David", age: 15, gender: "male"}) = skapar en collection 
- db.createCollection("products")
- db.superhero.drop() = drom-metod raderar permanent från collections
- db.superhero.inserOne({_id: "unique-id-1", name: "David", age: 20}) = om man vill skapa en egen id i stället för den slumpade id som mongodb ger oss
- update-method = db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})
- The remove() Method = >db.mycol.remove({'title':'MongoDB Overview'}), MongoDB's remove() method is used to remove a document from the collection. remove() method accepts two parameters. One is deletion criteria and second is justOne flag.



************************ Hur skapar jag en databas i mongoDB ************************ 

1. mongosh
2. 
    steg 1: use bestFilms // Anslut till databasen 'bestFilms'
        steg 2: show collections
            steg 3: du befinner dig i databasen och skriver db.bestFilms.find()

3. db.bestFilms.insertMany([{}])
4. db.bestFilms.find({name: "David"})
4. db.bestFilms.find({name: "David"}, {_id: false, gender: 0})
5. db.bestFilms.findOne({name: "David"})  = returns one document om vi inte anger vilket så retunerar den det första documentet från collection.
6. db.bestFilms.find({name: "David"}, {_id: false}).pretty()
7.db.users.updateOne({name: "David"}, {$set: {name: "sofie", age: 31, gender: "female"}})
8. updateOne.method = uppdaterar den första som bobjectet i arrayen 
9. om ett object inte har ett property och vi använder updateOne.method, kommer den att lägga till i objectet.
10. db.users.updateMany({name: "sofie", {$set: {gender: "female"}}})
11. db.users.deleteOne({name: "sofie"}) = delete the first document/object
12. db.users.deleteOne({}) = för att radera det första objectet
13. db.users.deleteMany({})
14. db.users.remove({name: "david"}, true) = raderar det första document/object
15. db.users.removeMany({name: "david"})
16. db.users.remove({}) = db.users.deleteMany({})

** curser:

17. db.users.find() = retunerar inte alla object i en aray. för att vi ska få allt ska vi använda "toArray().mtoden"
18. db.users.find().toArray.pretty()
19. db.users.find().forEach(function(cust){print("customer name: " + cust.name)})

** för att kunna komma in i en array och sedan i ett object och ännu längre ner gör vi på detta sätt
20.  db.users.find({"subscription.type": "yearly"})
21. db.users.updateOne({name: "david"}, {$set: {"subscription.type": "monthly"}})
22. db.users.updateOne({name: "anna"}, {$set: {"subscription.date.year": 2020}}) //för att gå djupare 
23. db.users.findOne({name: "anna"}).subscription = visar en del av parent-objectet
24. db.users.findOne({name: "anna"}).subscription.date.month = value og the nested field


**************************************************************************************

** Bra länk **
https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-18-04


** json vs bson


--------------------------------------------------------------





--------------------------------------------------------------
